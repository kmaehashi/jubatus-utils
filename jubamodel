#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
jubamodel - Jubatus Model File Viewer
Copyright Â© 2013-2014 Kenichi Maehashi. All rights reserved.

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License version 2.1 as published by the Free Software Foundation.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
'''

import struct
import optparse

import msgpack

class JubaModel(object):
    def __init__(self, target):
        self.target = target

    def start(self):
        model = None
        try:
            with open(self.target) as f:
                model = JubaModelFile.load(f)
        finally:
            if model:
                print "# Header"
                print model.header.record
                print
                print "# System Data"
                print model.system_data.record
                print
                print "# User Data"
                print model.user_data.record

class JubaModelFile(object):
    def __init__(self):
        self.header = None
        self.system_data = None
        self.user_data = None

    @staticmethod
    def load(f):
        model = JubaModelFile()
        model.header = JubaModelFile.Header.load(f)
        model.system_data = JubaModelFile.DataContainer.load(f, model.header.record['system_data_size'])
        model.user_data = JubaModelFile.DataContainer.load(f, model.header.record['user_data_size'])

        garbage = f.read(1)
        if len(garbage) != 0:
            raise InvalidModelFormatError('trailing garbage detected')

        return model

    class Header(object):
        def __init__(self):
            self.record = {}

        @classmethod
        def load(cls, f):
            header = cls()
            header._read_header(f, 8, 'magic_number', '8s')
            header._read_header(f, 8, 'format_version', '>Q')
            header._read_header(f, 4, 'jubatus_version_major', '>I')
            header._read_header(f, 4, 'jubatus_version_minor', '>I')
            header._read_header(f, 4, 'jubatus_version_maintenance', '>I')
            header._read_header(f, 4, 'crc32', '>I')
            header._read_header(f, 8, 'system_data_size', '>Q')
            header._read_header(f, 8, 'user_data_size', '>Q')
            return header

        def _read_header(self, f, b, key, fmt):
            value = f.read(b)
            if len(value) != b:
                raise InvalidModelFormatError('failed to read %s' % key)
            try:
                self.record[key] = struct.unpack(fmt, value)[0]
            except ValueError:
                raise InvalidModelFormatError('failed to parse %s value %s as %s' % (key, str(value), str(t)))

    class DataContainer(object):
        def __init__(self):
            self.record = {}

        @classmethod
        def load(cls, f, size):
            container = cls()
            data = f.read(size)
            container.record = msgpack.loads(data)
            return container

class InvalidModelFormatError(BaseException):
    pass

if __name__ == '__main__':
    parser = optparse.OptionParser()

    # arguments
    parser.add_option('-f', '--file',      type='string', nargs=1,
                      help='model file path')

    (args, _) = parser.parse_args()

    if not args.file:
        parser.error('no model file specified')

    jubamodel = JubaModel(args.file)
    jubamodel.start()
