#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
jubafetch - Online Model Snapshot Management
Copyright Â© 2014 Kenichi Maehashi. All rights reserved.

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License version 2.1 as published by the Free Software Foundation.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
'''

import os
import sys
import tempfile
import subprocess
import optparse

import msgpackrpc

class JubaFetch(object):
  def __init__(self, host, port, cluster, timeout, force, verbose):
    self.host = host
    self.port = port
    self.cluster = cluster
    self.timeout = timeout
    self.force = force
    self.verbose = verbose

  def start_save(self, pattern, model_name, local):
    model_paths = self.get_model_paths(model_name)
    for (host, port, model_path) in model_paths:
      out_file = pattern.format(host=host, port=port)
      if os.path.exists(out_file) and not self.force:
        self.log('Local file already exists; specify -f to overwrite: {0}'.format(out_file))
        return
    try:
      self.log('Requesting save...')
      self.send_rpc('save', model_name)
      self.log('Collecting models...')
      self.cluster_model_collect(pattern, model_paths, local)
    finally:
      self.log('Cleaning up...')
      self.cluster_model_remove(model_paths, local)

  def start_load(self, pattern, model_name, local):
    model_paths = self.get_model_paths(model_name)
    for (host, port, model_path) in model_paths:
      in_file = pattern.format(host=host, port=port)
      if not os.path.exists(in_file):
        self.log('Local file not found: {0}'.format(in_file))
        return
    try:
      self.log('Distributing models...')
      self.cluster_model_distribute(pattern, model_paths, local)
      self.log('Requesting load...')
      self.send_rpc('load', model_name)
    finally:
      self.log('Cleaning up...')
      self.cluster_model_remove(model_paths, local)

  def cluster_model_collect(self, pattern, model_paths, local):
    proc = ModelFileManipulator.get(local)
    for (host, port, model_path) in model_paths:
      self.log('collecting: {0}:{1} ({2})'.format(host, port, model_path), True)
      (fd, tmp_file) = tempfile.mkstemp(prefix='jubafetch-{host}-{port}-'.format(host=host, port=port))
      try:
        self.log('using temporary file: {}'.format(tmp_file), True)
        proc.get_file(host, model_path, tmp_file)
        out_file = pattern.format(host=host, port=port)
        os.rename(tmp_file, out_file)
        self.log('saved: {}'.format(out_file), True)
      except:
        os.unlink(tmp_file)
        raise
      finally:
        os.close(fd)

  def cluster_model_distribute(self, pattern, model_paths, local):
    proc = ModelFileManipulator.get(local)
    for (host, port, model_path) in model_paths:
      self.log('distributing: {0}:{1} ({2})'.format(host, port, model_path), True)
      source_path = pattern.format(host=host, port=port)
      proc.put_file(host, source_path, model_path)

  def cluster_model_remove(self, model_paths, local):
    proc = ModelFileManipulator.get(local)
    for (host, port, model_path) in model_paths:
      self.log('removing: {0}:{1} ({2})'.format(host, port, model_path), True)
      proc.remove_file(host, model_path)

  def get_model_paths(self, model_name):
    """
    Return list of 3-tuple (host, port, model_path)
    """
    result = []
    statuses = self.send_rpc('get_status')
    for (id, stat) in statuses.items():
      model_path = self.create_model_path(model_name, id, stat)
      (host, port) = id.split('_')
      result.append((host, port, model_path))
    return result

  def send_rpc(self, method, *params):
    client = msgpackrpc.Client(msgpackrpc.Address(self.host, self.port), self.timeout)
    result = client.call(method, self.cluster, *params)
    client.close()
    return result

  def log(self, msg, verbose=False):
    if not verbose or self.verbose:
      print(msg)

  def create_model_path(self, name, id, stat):
    (major, minor, maintenance) = map(int, stat['VERSION'].split('.'))

    ext = 'js' if (major == 0 and minor < 5) else 'jubatus'
    engine = 'jubatus' if (major == 0 and minor < 6) else stat['type']

    return stat['datadir'] + '/' + id + '_' + engine + '_' + name + '.' + ext

class ModelFileManipulator(object):
  def _run(self, cmdline):
    return subprocess.check_call(cmdline)

  @classmethod
  def get(cls, is_local):
    if is_local:
      return LocalModelFileManipulator()
    return RemoteModelFileManipulator()

class LocalModelFileManipulator(ModelFileManipulator):
  def get_file(self, _, source_path, dest_path):
    return self._run(['cp', source_path, dest_path])
  def put_file(self, _, source_path, dest_path):
    return self._run(['ln', '-sf', source_path, dest_path])
  def remove_file(self, _, path):
    return self._run(['rm', '-f', path])

class RemoteModelFileManipulator(ModelFileManipulator):
  def get_file(self, host, source_path, dest_path):
    return self._run(['scp', host + ':' + os.path.abspath(source_path), dest_path])
  def put_file(self, host, source_path, dest_path):
    return self._run(['scp', os.path.abspath(source_path), host + ':' + dest_path])
  def remove_file(cls, host, path):
    return cls._run(['ssh', host, 'rm', '-f', path])

if __name__ == '__main__':
  parser = optparse.OptionParser()

  DEFAULT_TARGET_HOST='127.0.0.1'

  # arguments
  parser.add_option('-H', '--host',      type='string', default=None,
                    help='host name or IP address of the server / proxy (default: {0})'.format(DEFAULT_TARGET_HOST))
  parser.add_option('-P', '--port',      type='int',    default=9199,
                    help='port number of the server / proxy (default: %default)')
  parser.add_option('-C', '--cluster',   type='string', default='',
                    help='cluster name; only required when connecting to proxy')
  parser.add_option('-T', '--timeout',   type='int',    default=120,
                    help='timeout for RPC connection')
  parser.add_option('-s', '--save',      action='store_true', default=None,
                    help='save model (default)')
  parser.add_option('-l', '--load',      action='store_true', default=None,
                    help='load model')
  parser.add_option('-m', '--model',     type='str',    default='model_{host}-{port}.jubatus',
                    help='local model path to load from or save to (default: %default)')
  parser.add_option('-i', '--id',        type='str',    default='jubafetch_snapshot',
                    help='model ID used for save/load (default: %default)')
  parser.add_option('-L', '--local',     action='store_true', default=False,
                    help='directly manipulate files instead of ssh/scp, assuming that data ' +
                         'directory is on local (or shared) file system; default when --host ' +
                         'is not specified')
  parser.add_option('-f', '--force',     action='store_true', default=False,
                    help='overwrite existing model file when --save')
  parser.add_option('-v', '--verbose',   action='store_true', default=False,
                    help='log verbosely')

  (args, direct_args) = parser.parse_args()

  if args.port < 0 or 65535 < args.port:
    parser.error('port number out of range')
  if args.save and args.load:
    parser.error('save and load cannot be specified at once')
  if len(direct_args) != 0:
    parser.error('unused remaining arguments: {0}'.format(direct_args))

  if args.host is None:
    args.host = DEFAULT_TARGET_HOST
    args.local = True

  jubafetch = JubaFetch(args.host, args.port, args.cluster, args.timeout, args.force, args.verbose)

  try:
    if args.load:
      jubafetch.start_load(args.model, args.id, args.local)
    else:
      jubafetch.start_save(args.model, args.id, args.local)
  except Exception as e:
    if args.verbose:
      raise
    print "{0}: {1}".format(e.__class__.__name__, str(e))
    sys.exit(2)
